
version: 2.1

executors:
    build_box:
        docker:
        - image: aplazame/nodejs-karma:0.7.4
        working_directory: ~/repo

    deploy_rsync_box:
        docker:
        - image: aplazame/nodejs-karma:0.7.4
        working_directory: ~/tmp/
    
    deploy_s3_box:
        docker:
        - image: aplazame/nodejs-karma:0.7.4
        working_directory: /tmp/workspace

commands:
    replace_cred:
        steps:
        - run:
            name: 'Add credentials for cloning properly via HTTPS instead of SSH'
            command: sed -i "s/git+ssh:\/\/git@github.com\/aplazame\//https:\/\/$GITHUB_TOKEN:x-oauth-basic@github.com\/aplazame\//" package-lock.json &&
                    sed -i "s/git+ssh:\/\/git@github.com\/aplazame\//https:\/\/$GITHUB_TOKEN:x-oauth-basic@github.com\/aplazame\//" package.json

    rsync:
        description: "A simple encapsulation of doing a rsync"
        parameters:
            folder:
                type: string
            user:
                type: string
                default: ubuntu
            host:
                type: string
            dest:
                type: string
            overwrite:
                type: boolean
                default: true
        steps:
        - run:
            name: RSync Deploy
            # command: echo "rsync -rva<<# parameters.overwrite >> --delete<</ parameters.overwrite >> /tmp/workspace/<< parameters.folder >>/ << parameters.user >>@<< parameters.host >>:<< parameters.dest >>"
            command: rsync -rva<<# parameters.overwrite >> --delete<</ parameters.overwrite >> /tmp/workspace/<< parameters.folder >>/ << parameters.user >>@<< parameters.host >>:<< parameters.dest >>

    s3_folder:
        description: "Parametrized folder deploy to S3"
        parameters:
            bucket_name:
                type: string
            src:
                type: string
            dest:
                type: string
            overwrite:
                type: boolean
                default: true
        steps:
            - run:
                name: "Deploying folder to S3: << parameters.src >> > s3:<< parameters.bucket_name >>/<< parameters.dest >>"
                command: |
                    aws s3 sync --acl private \
                        --cache-control "private, max-age:3600"\
                        <<# parameters.overwrite >> --delete<</ parameters.overwrite >>\
                        << parameters.src >> s3://<< parameters.bucket_name >>/<< parameters.dest >>;

    s3_file:
        description: "Parametrized single file deploy to S3"
        parameters:
            bucket_name:
                type: string
            src:
                type: string
            dest:
                type: string
                default: ""
            content_type:
                type: string
            cache_control:
                type: string
                default: private, max-age:3600
        steps:
            - run:
                name: "Deploying file to S3: << parameters.src >> > s3:<< parameters.bucket_name >>/<< parameters.dest >>"
                command: |
                    aws s3api put-object --acl private \
                        --bucket << parameters.bucket_name >> \
                        --cache-control "<< parameters.cache_control >>" \
                        --content-type "<< parameters.content_type >>" \
                        --key << parameters.dest >> \
                        --body << parameters.src >>;

jobs:
    build:
        executor: build_box
        steps:
        - checkout
        - replace_cred
        # Download and cache dependencies
        - restore_cache:
            keys:
            - node-10-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - node-10-
        
        - run:
            name: Build application
            command: make build | sed --unbuffered 's/[[:alnum:]]*:x-oauth-basic//g'

        - save_cache:
            paths:
                - node_modules
            key: node-10-{{ checksum "package.json" }}
        
        - persist_to_workspace:
            root: ./
            paths:
                - public
                - dist

    rsync_deploy:
        executor: deploy_rsync_box
        parameters:
            then:
                description: commands executed after rsync setup
                type: steps
                default: []
        steps:
        - attach_workspace:
            at: /tmp/workspace

        - add_ssh_keys

        - run:
            name: Add instance to known_hosts
            command: |
                ssh-keyscan deploy-prod.aplazame.org >> ~/.ssh/known_hosts

        # - run:
        #     name: Installing deployment dependencies [RSync]
        #     command: sudo apt install rsync

        - steps: << parameters.then >>

    s3_deploy:
        executor: deploy_s3_box
        parameters:
            do_deploy:
                description: commands to be executed after for S3 deploy
                type: steps
                default: []
        steps:
        - attach_workspace:
            at: /tmp/workspace

        # - run:
        #     name: Installing deployment dependencies [Python + awscli]
        #     command: |
        #         sudo apt install python-pip python-dev
        #         sudo pip install awscli

        - steps: << parameters.do_deploy >>


workflows:
    version: 2

    build_and_deploy:
        jobs:
        - build

        - rsync_deploy:
            requires:
                - build
            then:
            - rsync:
                folder: dist
                user: $DEPLOY_USER_DEV
                host: deploy-dev.aplazame.org
                dest: ~/www/frontend/aplazame-js

            - rsync:
                folder: public
                user: $DEPLOY_USER_DEV
                host: deploy-dev.aplazame.org
                dest: ~/www/frontend/demo-site

            filters:
                branches:
                    only:
                    - master

        - rsync_deploy:
            requires:
                - build
            then:
            - rsync:
                folder: public
                host: demo.aplazame.org
                dest: ~/www/frontend/demo-demo

            filters:
                branches:
                    only:
                    - demo
                    - jgermade/ch8484/sacar-archivos-estáticos-del-widget-y-aplazame

        - rsync_deploy:
            requires:
                - build
            then:
            - rsync:
                folder: dist
                user: $DEPLOY_USER_PROD
                host: deploy-prod.aplazame.org
                dest: ~/www/frontend/aplazame-js

            - rsync:
                folder: public
                user: $DEPLOY_USER_PROD
                host: deploy-prod.aplazame.org
                dest: ~/www/frontend/demo-site

            filters:
                branches:
                    only:
                    - release

        - s3_deploy:
            requires:
                - build

            do_deploy:
            - s3_folder:
                bucket_name: cdn-dev.aplazame.com
                src: public/dist/widgets
                dest: aplazame-js/widgets
            
            - s3_file:
                bucket_name: cdn-dev.aplazame.com
                src: public/dist/aplazame.min.js
                dest: aplazame-js/aplazame.js
                content_type: application/javascript
                cache_control: no-cache, no-store
            
            filters:
                branches:
                    only:
                    - jgermade/ch8484/sacar-archivos-estáticos-del-widget-y-aplazame

      



